from dash import Dash, dcc, html, Input, Output, callback, dash_table
from plotly.subplots import make_subplots
import dash_bootstrap_components as dbc
import plotly.graph_objects as go
from datetime import date
import pandas as pd

dashapp = Dash(__name__,
           external_stylesheets=[
                dbc.themes.BOOTSTRAP, 
                dbc.icons.FONT_AWESOME
                ])

LOGO = 'ksviz/assets/logo.jpg'

# Loading dataset
data = pd.read_csv('dataframe.csv')
data['Trading_Date'] = pd.to_datetime(data['Trading_Date'])

# Variables

sys_vals = [
    {"label": "20 Degree Sys", "value": "System_20Degrees"},
    {"label": "25 Degree Sys", "value": "System_25Degrees"},
    {"label": "31 Degree Sys", "value": "System_31Degrees"},
    {"label": "34 Degree Sys", "value": "System_34Degrees"},
    {"label": "39 Degree Sys", "value": "System_39Degrees"},
                ]


# Functions

def compare_cards(size,charts):
    df = data.copy()
    comp_sum = pd.DataFrame(
        columns=['Solar System','Electricity Generated by Solar',
                 'Electricity Cost w/o Solar','Electricity Cost with Solar',
                 'Revenue from exporting Solar','Final Electricity Cost',
                 'Carbon Emission w/o Solar','Carbon Emission with Solar'
                                     ])

    for chart in charts:
        
        df[f'{chart}_Total(kWh)'] = df[f'{chart}']*size
        
        df['Electricity_Cost($)'] = (round(df['icp667(KWh)']*df['TOU_price(c$/KWh)'] + 
                                        df['icp713(KWh)']*df['TOU_price(c$/KWh)'],3))
        df['Carbon_Emission_wo_Solar(t)'] = round(((df['icp667(KWh)'] + df['icp713(KWh)'])*df['Carbon_Intensity(g/KWh)'])/1000000,3)

        df[f'Net_consum(kWh)_{chart}'] = (df['icp667(KWh)'] + df['icp713(KWh)'] - df[f'{chart}_Total(kWh)'])

        df[f'Carbon_Emission_w_Solar(t)_{chart}'] = (round((df[f'Net_consum(kWh)_{chart}']*df['Carbon_Intensity(g/KWh)'])/1000000,3))

        df.loc[df[f'Carbon_Emission_w_Solar(t)_{chart}']<0,f'Carbon_Emission_w_Solar(t)_{chart}'] = 0

        # Cost with Solar
        df[f'Cost_wSolar_{chart}'] = df[f'Net_consum(kWh)_{chart}']*df['TOU_price(c$/KWh)']
        df.loc[df[f'Cost_wSolar_{chart}']<0,f'Cost_wSolar_{chart}'] = 0


        # Revenue of export
        df[f'Revenue_{chart}'] = -(df[f'Net_consum(kWh)_{chart}']*df['ISL2201(c$/KWh)'])
        df.loc[df[f'Revenue_{chart}']<0,f'Revenue_{chart}'] =  0

        new_row = [chart,
                   f"{df[f'{chart}_Total(kWh)'].sum():,.2f} kWh",
                   f"${(df['Electricity_Cost($)'].sum()/100):,.2f}",
                   f"${(df[f'Cost_wSolar_{chart}'].sum()/100):,.2f}",
                   f"${(df[f'Revenue_{chart}'].sum()/100):,.2f}",
                   f"${(((df[f'Cost_wSolar_{chart}'].sum()) - (df[f'Revenue_{chart}'].sum()))/100):,.2f}",
                   f"{df['Carbon_Emission_wo_Solar(t)'].sum():,.3f} ton",
                   f"{df[f'Carbon_Emission_w_Solar(t)_{chart}'].sum():,.3f} ton"
                   ]

        comp_sum.loc[len(comp_sum)] = new_row

    return dash_table.DataTable(comp_sum.to_dict('records'), [{"name": i, "id": i} for i in comp_sum.columns],
                                style_cell={'fontSize':15, 'font-family':'arial', 'text-align':'center'})

def summary_cards(df):
    cards = dbc.Row([
        dbc.Card([
            dbc.CardBody([
                html.H6('Electricity Cost w/o Solar',style={'textAlign':'center','marginBottom':'15px','font-weight':'bold'}),
                html.H4(f"${(df['Electricity_Cost($)'].sum())/100:,.2f}",style={'textAlign':'center',
                    'color':'orange','font-weight':'bold'})
                ])
            ],style={'width':'290px','marginLeft':'12px'}),

        dbc.Card([
            dbc.CardBody([
                html.H6('Electricity Cost with Solar',style={'textAlign':'center','marginBottom':'15px','font-weight':'bold'}),
                html.H4(f"${(df['Cost_wSolar'].sum())/100:,.2f}",style={'textAlign':'center',
                    'color':'gray','font-weight':'bold'})
                ])
            ],style={'width':'290px','marginLeft':'12px'}),
        
        dbc.Card([
            dbc.CardBody([
                html.H6('Revenue from exporting Solar',style={'textAlign':'center','marginBottom':'15px','font-weight':'bold'}),
                html.H4(f"${(df['Revenue'].sum())/100:,.2f}",style={'textAlign':'center',
                    'color':'#346888','font-weight':'bold'})
                ])
            ],style={'width':'290px','marginLeft':'12px'}),

        dbc.Card([
            dbc.CardBody([
                html.H6('Final Electricity Cost',style={'textAlign':'center','marginBottom':'15px','font-weight':'bold'}),
                html.H4(f"${(df['Cost_wSolar'].sum() - df['Revenue'].sum())/100:,.2f}",
                        style={'textAlign':'center','color':'brown','font-weight':'bold'})
                ])
            ],style={'width':'290px','marginLeft':'12px'}),
    ])
    return cards

def main_chart(df,chart):
    fig = make_subplots(rows=3, cols=1,
        shared_xaxes=True,
        subplot_titles=('Average Daily Spot Price of ISL2201($c/kWh) & Average Daily TOU Price($c/kWh)',
            'Daily Electricity Consumption & Solar Generation (kWh)',
            'Cost & Revenue breakdown ($)'),
        vertical_spacing=0.1,
        row_width=[0.4,0.4,0.2])
    
    fig.add_trace(
        go.Scatter(x=df['Trading_Date'], y=(df['ISL2201(c$/KWh)']), 
                    name='ISL2201 Average Spotprice ($c/kWh)',
                    hoverinfo='x+y',
                    mode='lines',
                    line=dict(width=1.5, color='rgba(138, 138, 138, 1)'),
                    hovertemplate = '%{y:,.2f} $c'),row=1,col=1
    )

    fig.add_trace(
        go.Scatter(x=df['Trading_Date'], y=(df['TOU_price(c$/KWh)']), 
                    name='Average TOU Price ($c/kWh)',
                    hoverinfo='x+y',
                    mode='lines',
                    line=dict(width=1.5, color='rgba(252, 108, 5, 1)'),
                    hovertemplate = '%{y:,.2f} $c'),row=1,col=1
    )

    fig.add_trace(
        go.Scatter(x=df['Trading_Date'], y=(df[f'{chart}_Total(kWh)']), 
                    name=f'{chart} Generation(kWh)',
                    hoverinfo='x+y',
                    mode='lines',
                    stackgroup='one',
                    line=dict(width=1, color='rgba(33, 145, 33,1)'),
                    hovertemplate = '%{y:,.2f} kWh'),row=2,col=1
    )

    fig.add_trace(
        go.Scatter(x=df['Trading_Date'], y=(df['icp667(KWh)']+df['icp713(KWh)']), name='Total Consumption(kWh)',
            mode='markers', showlegend=False,
            marker=dict(
                symbol="triangle-down",
                size=5,
                color='rgba(252, 108, 5, 0.7)',
                line = dict(width=0)
            ),
            hovertemplate = '%{y:,.2f} kWh'),row=2,col=1
    )

    fig.add_trace(
        go.Scatter(x=df['Trading_Date'], y=df['icp667(KWh)'], name='6678947RNFDC(kWh)',
            hoverinfo='x+y',
            mode='lines',
            stackgroup='two',
            line=dict(width=0.5,color='rgba(201, 201, 201, 1)'),#line = dict(width=0)),
            hovertemplate = '%{y:,.2f} kWh'),row=2,col=1
    )

    fig.add_trace(
        go.Scatter(x=df['Trading_Date'], y=df['icp713(KWh)'], name='7135255RN4FD(kWh)',
            hoverinfo='x+y',
            mode='lines',
            stackgroup='two',
            line=dict(width =0.5,color='rgba(235, 235, 235, 1)'),#line = dict(width=0)),
            hovertemplate = '%{y:,.2f} kWh'),row=2,col=1
    )

    fig.add_trace(
        go.Bar(x=df['Trading_Date'], y=df['Electricity_Cost($)']/100, 
                    name='Cost w/o Solar($)',
                    marker=dict(color='rgba(193, 231, 255, 1)',line = dict(width=0)),
                    hovertemplate = '$%{y:,.2f}'),row=3,col=1
    )

    fig.add_trace(
        go.Bar(x=df['Trading_Date'], y=df['Cost_wSolar']/100, 
                    name='Cost with Solar($)',
                    marker=dict(color='rgba(157, 198, 224, 1)',line = dict(width=0)),
                    hovertemplate = '$%{y:,.2f}'),row=3,col=1
    )

    fig.add_trace(
        go.Bar(x=df['Trading_Date'], y= -(df['Revenue'])/100,
                    name='Revenue from Export($)',
                    marker=dict(color='rgba(122, 166, 194, 1)',line = dict(width=0)),
                    hovertemplate = '$%{y:,.2f}'),row=3,col=1
    )

    # Add figure layout
    for n in range (3):
        fig.layout.annotations[n].update(x=0,font_size=14,xanchor ='left',)
    fig.update_layout(
        # title_text= 'Daily ISL2201 Average Spotprice, Electricity Consumption & Solar Generation',
        height = 1000,
        barmode = 'overlay',
        title_yanchor='top',
        hovermode="x unified",
        plot_bgcolor='#FFFFFF',
        margin = dict(r=20,t=20),
        xaxis = dict(tickmode = 'linear',dtick = 'M1'),
        legend=dict(orientation='h',yanchor='bottom',y=1.02,xanchor='right',x=1,)
        )
    
    # fig.update_layout(row=2, col=1,barmode = 'stack',)
    # fig.update_layout(row=3, col=1,barmode = 'overlay',)
    
    # Styling
    # fig.update_layout(
    #     title = dict(font = dict(size = 20,
    #                             #  color = 'blue'
    #                              )),
    #     legend = dict(font = dict(size = 15,
        
    #     )),
    # )

    fig.update_yaxes(row=1, col=1, title='Price ($c/kWh)',showgrid=True, gridwidth=1, gridcolor='#f0f0f0',
                 title_font_size=12,tickfont=dict(size=12)
                 )
    fig.update_yaxes(row=2, col=1, title='Consumption(kWh)',showgrid=True, gridwidth=1, gridcolor='#f0f0f0',
                 title_font_size=12,tickfont=dict(size=12)
                 )
    fig.update_yaxes(row=3, col=1, title='$NZ',showgrid=True, gridwidth=1, gridcolor='#f0f0f0',
                 title_font_size=12,tickfont=dict(size=12)
                 )
    fig.update_traces(xaxis='x3')
    fig.update_xaxes(showgrid=False, gridwidth=1, title_font_size=12,tickfont=dict(size=12), dtick='M1')

    return fig

def group_charts(df,chart,clk_date):
    fig = make_subplots(rows=4, cols=1,
        shared_xaxes=True,
        subplot_titles=('Electricity Consumption & Solar Generation (kWh)',
            'Net Electricity Consumption (kWh)',
            'ISL2201 Spot Price ($c/kWh)',
            'Electricity Cost($)'),
        vertical_spacing=0.1,
        row_width=[0.4,0.2,0.2,0.3])

    fig.add_trace(
        go.Scatter(x=df['Trading_Period'], y=(df['icp667(KWh)']+df['icp713(KWh)']), name='Total Consumption(kWh)',
            mode='markers', showlegend=False,
            marker=dict(
                symbol="triangle-down",
                size=5,
                color='rgba(252, 108, 5, 0.7)',
                line = dict(width=0)
            ),
            hovertemplate = '%{y:,.2f} kWh'),row=1,col=1
    )

    fig.add_trace(
        go.Scatter(x=df['Trading_Period'], y=df['icp667(KWh)'], name='6678947RNFDC(kWh)',
            hoverinfo='x+y',
            mode='lines',
            stackgroup='two',
            line=dict(width=0.5,color='rgba(201, 201, 201, 1)'),#line = dict(width=0)),
            hovertemplate = '%{y:,.2f} kWh'),row=1,col=1
    )

    fig.add_trace(
        go.Scatter(x=df['Trading_Period'], y=df['icp713(KWh)'], name='7135255RN4FD(kWh)',
            hoverinfo='x+y',
            mode='lines',
            stackgroup='two',
            line=dict(width =0.5,color='rgba(235, 235, 235, 1)'),#line = dict(width=0)),
            hovertemplate = '%{y:,.2f} kWh'),row=1,col=1
    )

    fig.add_trace(
        go.Scatter(x=df['Trading_Period'], y=(df[f'{chart}_Total(kWh)']), 
                    name=f'{chart} Generation(kWh)',
                    hoverinfo='x+y',
                    mode='lines',
                    stackgroup='one',
                    line=dict(width=0.5, color='rgba(33, 145, 33,1)'),
                    hovertemplate = '%{y:,.2f} kWh'),row=1,col=1
    )

    fig.add_trace(
        go.Scatter(x=df['Trading_Period'], y=(df['icp667(KWh)'] + df['icp713(KWh)'] - df[f'{chart}_Total(kWh)'])
                   , name='Net Consumption(kWh)',
            hoverinfo='x+y',
            mode='lines',
            stackgroup='three',
            line=dict(width=1.5,color='rgba(255,215,0, 1)'),#line = dict(width=0)),
            hovertemplate = '%{y:,.2f} kWh'),row=2,col=1
    )

    fig.add_trace(
        go.Scatter(x=df['Trading_Period'], y=(df['ISL2201(c$/KWh)']), 
                    name='ISL2201 Average Spotprice ($c/kWh)',
                    hoverinfo='x+y',
                    mode='lines+markers',
                    marker=dict(symbol="arrow", size=10,angleref="previous",),
                    line=dict(width=1.5, color='rgba(138, 138, 138, 1)'),
                    hovertemplate = '%{y:,.2f} $c'),row=3,col=1
    )

    fig.add_trace(
        go.Scatter(x=df['Trading_Period'], y=(df['TOU_price(c$/KWh)']), 
                    name='Average TOU Price ($c/kWh)',
                    hoverinfo='x+y',
                    mode='lines+markers',
                    marker=dict(symbol="diamond",),
                    line=dict(width=1.5, color='rgba(252, 108, 5, 1)'),
                    hovertemplate = '%{y:,.2f} $c'),row=3,col=1
    )

    fig.add_trace(
        go.Bar(x=df['Trading_Period'], y=df['Electricity_Cost($)']/100, 
                    name='Cost w/o Solar($)',
                    marker=dict(color='rgba(193, 231, 255, 1)',line = dict(width=0)),
                    hovertemplate = '$%{y:,.2f}'),row=4,col=1
    )

    fig.add_trace(
        go.Bar(x=df['Trading_Period'], y=df['Cost_wSolar']/100, 
                    name='Cost with Solar($)',
                    marker=dict(color='rgba(157, 198, 224, 1)',line = dict(width=0)),
                    hovertemplate = '$%{y:,.2f}'),row=4,col=1
    )

    fig.add_trace(
        go.Bar(x=df['Trading_Period'], y= -(df['Revenue']/100),
                    name='Revenue from Export($)',
                    marker=dict(color='rgba(122, 166, 194, 1)',line = dict(width=0)),
                    hovertemplate = '$%{y:,.2f}'),row=4,col=1
    )

    # Add figure layout
    for n in range (4):
        fig.layout.annotations[n].update(x=0,font_size=14,xanchor ='left')
    fig.update_xaxes(type='category', categoryorder='category ascending')
    fig.update_traces(xaxis='x4')
    fig.update_layout(
        title_yanchor='top',
        height = 1000,
        hovermode="x unified",
        plot_bgcolor='#FFFFFF',
        barmode = 'overlay',
        margin = dict(r=20,t=20),
        # xaxis = dict(tickangle = -45, tickfont =dict(size=10),showticklabels=True),
        legend=dict(orientation='h',yanchor='bottom',y=1.02,xanchor='right',x=1,)
        )
    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='#f0f0f0',
                     title_font_size=12,tickfont=dict(size=12))
    fig.update_yaxes(row = 1, col = 1, title='Consumption (kWh)')
    fig.update_yaxes(row = 2, col = 1, title='Spot Price ($c/kWh)')
    fig.update_yaxes(row = 3, col = 1, title='Consumption (kWh)')
    fig.update_yaxes(row = 4, col = 1, title='$NZ')
    fig.update_xaxes(showticklabels=True,tickangle= -60, showgrid=False, gridwidth=1, 
                     title_font_size=12,tickfont=dict(size=12))

    return fig

def ems_summary_cards(df):
    cards = dbc.Row([
        dbc.Card([
            dbc.CardBody([
                html.H6('Yearly Carbon Emission w/o Solar',style={'textAlign':'center','marginBottom':'15px','font-weight':'bold'}),
                html.H4(f"{df['Carbon_Emission_wo_Solar(t)'].sum():,.3f} ton",style={'textAlign':'center',
                    'color':'rgb(73,73,73)','font-weight':'bold'})
                ])
            ],style={'width':'290px','marginLeft':'12px'}),

        dbc.Card([
            dbc.CardBody([
                html.H6('Yearly Carbon Emission with Solar',style={'textAlign':'center','marginBottom':'15px','font-weight':'bold'}),
                html.H4(f"{df['Carbon_Emission_w_Solar(t)'].sum():,.3f} ton",style={'textAlign':'center',
                    'color':'green','font-weight':'bold'})
                ])
            ],style={'width':'290px','marginLeft':'12px'}),
    ])
    return cards

def daily_ems_charts(daily_ems):

    fig = make_subplots(rows=2, cols=1,
        shared_xaxes=True,
        subplot_titles=('Carbon Intensity (g/kWh)',
            'Carbon Emission with and without Solar (ton)'),
        vertical_spacing=0.1,
        row_width=[0.6,0.4])
    
    fig.add_trace(
        go.Scatter(x=daily_ems['Trading_Date'], y=daily_ems['Carbon_Intensity(g/KWh)'], 
                    name='Carbon Intensity (g/kWh)',
                    hoverinfo='x+y',
                    mode='lines',
                    line=dict(width=1.5, dash='dot', color='rgba(116, 100, 175,1)'),
                    hovertemplate = '%{y:,.2f} g/kWh'),row=1,col=1
    )

    fig.add_trace(
        go.Bar(x=daily_ems['Trading_Date'], y=daily_ems['Carbon_Emission_wo_Solar(t)'], 
                    name='Carbon Emission without Solar(t)',
                    marker=dict(color='rgba(183, 183, 183, 1)',line = dict(width=0)),
                    hovertemplate = '%{y:,.3f} ton'),row=2,col=1
    )

    fig.add_trace(
        go.Bar(x=daily_ems['Trading_Date'], y=daily_ems['Carbon_Emission_w_Solar(t)'], 
                    name='Carbon Emission with Solar(t)',
                    marker=dict(color='rgba(155,199,117, 1)',line = dict(width=0)),
                    hovertemplate = '%{y:,.3f} ton'),row=2,col=1
    )

    # Add figure layout
    for n in range (2):
        fig.layout.annotations[n].update(x=0,font_size=14,xanchor ='left')
    fig.update_layout(
        # title_text= 'Daily Average Carbon Intensity & Carbon Emission from Isaac power consumption',
        height = 600,
        barmode = 'overlay',
        title_yanchor='top',
        hovermode="x unified",
        plot_bgcolor='#FFFFFF',
        margin = dict(r=20,t=20),
        xaxis = dict(tickmode = 'linear',dtick = 'M1'),
        legend=dict(orientation='h',yanchor='bottom',y=1.02,xanchor='right',x=1)
        )
    fig.update_yaxes(row=1, col=1, title='Carbon Intensity (g/kWh)',showgrid=True, gridwidth=1, gridcolor='#f0f0f0',
                 title_font_size=12,tickfont=dict(size=12)
                 )
    fig.update_yaxes(row=2, col=1, title='Carbon Emission (t)',showgrid=True, gridwidth=1, gridcolor='#f0f0f0',
                 title_font_size=12,tickfont=dict(size=12)
                 )
    fig.update_traces(xaxis='x2')
    fig.update_xaxes(showgrid=False, gridwidth=1, title_font_size=12,tickfont=dict(size=12), dtick='M1')
    return fig

def detail_ems_charts(detail_ems,clk_date):
    fig = make_subplots(rows=2, cols=1,
        shared_xaxes=True,
        subplot_titles=('Carbon Intensity (g/kWh)',
            'Carbon Emission with and without Solar (kg)'),
        vertical_spacing=0.1,
        row_width=[0.6,0.4])
    
    fig.add_trace(
        go.Scatter(x=detail_ems['Trading_Period'], y=detail_ems['Carbon_Intensity(g/KWh)'], 
                    name='Carbon Intensity (g/kWh)',
                    hoverinfo='x+y',
                    mode='lines+markers',
                    marker=dict(symbol="pentagon",size=7),
                    line=dict(width=1.5, dash='dash', color='rgba(116, 100, 175,1)'),
                    hovertemplate = '%{y:,.2f} g/kWh'),row=1,col=1
    )

    fig.add_trace(
        go.Bar(x=detail_ems['Trading_Period'], y=detail_ems['Carbon_Emission_wo_Solar(kg)'], 
                    name='Carbon Emission without Solar(kg)',
                    marker=dict(color='rgba(183, 183, 183, 1)',line = dict(width=0)),
                    hovertemplate = '%{y:,.3f} kg'),row=2,col=1
    )

    fig.add_trace(
        go.Bar(x=detail_ems['Trading_Period'], y=detail_ems['Carbon_Emission_w_Solar(kg)'], 
                    name='Carbon Emission with Solar(kg)',
                    marker=dict(color='rgba(155,199,117, 1)',line = dict(width=0)),
                    hovertemplate = '%{y:,.3f} kg'),row=2,col=1
    )

    # Add figure layout
    for n in range (2):
        fig.layout.annotations[n].update(x=0,font_size=14,xanchor ='left')
    fig.update_layout(
        # title_text= f'Carbon Intensity & Carbon Emission from Isaac power consumption on {clk_date}',
        height = 500,
        barmode = 'overlay',
        title_yanchor='top',
        hovermode="x unified",
        plot_bgcolor='#FFFFFF',
        margin = dict(r=20,t=20),
        xaxis = dict(tickmode = 'linear',dtick = 'M1'),
        legend=dict(orientation='h',yanchor='bottom',y=1.02,xanchor='right',x=1)
        )
    fig.update_yaxes(row=1, col=1, title='Carbon Intensity (g/kWh)',showgrid=True, gridwidth=1, gridcolor='#f0f0f0',
                 title_font_size=12,tickfont=dict(size=12)
                 )
    fig.update_yaxes(row=2, col=1, title='Carbon Emission (kg)',showgrid=True, gridwidth=1, gridcolor='#f0f0f0',
                 title_font_size=12,tickfont=dict(size=12)
                 )
    fig.update_traces(xaxis='x2')
    fig.update_xaxes(showgrid=False, gridwidth=1, title_font_size=12,tickfont=dict(size=12), dtick='M1')
    return fig


navbar = dbc.NavbarSimple(
    brand= dbc.Container(
                dbc.Row(
                    [
                        dbc.Col(html.Img(src=LOGO, height="30px",style={'justify':'end'})),
                        dbc.Col(html.H4('NICK NGUYEN', className="ms-2", 
                                        style={
                                               'color' :'#444444'})),
                    ],
                    align="end",
                    className="g-0 px-0",
                    style={'padding-left':'0px'},
                ),fluid=True,
            ),
    
    brand_href='https://nicknguyen.me',
    color='white',
    sticky='top',
    dark=False,
    fluid=True,
    class_name='px-0 shadow-sm p-2 mb-5 bg-white',
)

content = html.Div([
    dbc.Row([
            dbc.Col([
                dbc.Card([
                dbc.Row(html.H6('Select the size of the Solar System',
                                style={'marginBottom':'15px','font-weight':'bold'}),),
                dbc.Row([
                dbc.Col(dcc.Input(
                        id='input_size', type='number', 
                        placeholder=250,min=0,value=250,style={'width':'95%'}),width=4),
                dbc.Col(html.P('m2 (kW)')),        
                    ]),
                ],style={'padding':'10px','width':'85%'}),
            ],width=4),
            dbc.Col([
                dbc.Card([
                dbc.Row(html.H6('Choose the the Solar System with different angle for comparision',
                                style={'marginBottom':'15px','font-weight':'bold'}),),
                dbc.Row([dcc.Dropdown(
                    options=sys_vals,
                    multi=True,
                    clearable=False,
                    value=['System_31Degrees'],
                    id="sys-checkbox")
                ]),
            ],style={'padding':'10px'}),
            ],width=6),
        ]),

    html.Br(), html.Br(),
    html.H4('Comparison Summary'),
    html.Br(),
    dbc.Row(html.Div(id='compare-summary',children={})),
    html.Br(),
    html.Hr(),
    html.Br(),
    html.H3('Electricity Consumption - Solar Generation - Revenue Breakdown',
            style={'text-align':'center'}),
    html.Br(),
    dbc.Row([
            dbc.Col([
                dbc.Card([
                dbc.Row(html.H6('Choose the Solar System for visualisation',
                                style={'marginBottom':'15px','font-weight':'bold'}),),
                dbc.Row([dcc.Dropdown(
                    options= sys_vals,
                    clearable=False,
                    value='System_31Degrees',
                    id="chart-checkbox")
                ]),
            ],style={'padding':'10px'}),
            ],width=3),

            dbc.Col([html.Div(id='summary',children={})
            ],width=9)
        ]),
    html.Br(),
    dbc.Row([  
        dcc.Loading(id='comp_loading',children=
            [
                html.H4('Overview visualisation'),
                dbc.Card(dcc.Graph(id='main-graph', figure={}, clickData=None, 
                hoverData=None)
            )],
            type = 'default',
        )
    ]),
    html.Br(),html.Br(),
    dbc.Row([  
        dcc.Loading(id='detail_loading',children=
            [   
                html.H4(id ='d-graph-title',children={}),
                dbc.Card(dcc.Graph(id='detail-graph', figure={}, clickData=None, 
                hoverData=None),
            )],
            type = 'default',
        )
    ]),
    html.Br(),html.Br(),
    html.H3('Carbon Emission & Carbon Intensity from Electricity Consumption',style={'text-align':'center'}),
    html.Br(),
    dbc.Row(html.Div(id='ems-summary',children={})),
    html.Br(),
    dbc.Row([  
        dcc.Loading(id='ems_loading',children=
            [
                html.H4('Daily Average Carbon Emission & Carbon Intensity'),
                dbc.Card(dcc.Graph(id='ems-graph', figure={}, clickData=None, 
                hoverData=None)
            )],
            type = 'default',
        )
    ]),
    html.Br(),html.Br(),
    dbc.Row([  
        dcc.Loading(id='ems_detail_loading',children=
            [
                html.H4(id ='d-ems-title',children={}),
                dbc.Card(dcc.Graph(id='ems-detail-graph', figure={}, clickData=None, 
                hoverData=None)
            )],
            type = 'default',
        )
    ]),
])

dashapp.layout = dbc.Container([
    navbar,
    dbc.Modal(
            [
                dbc.ModalHeader(dbc.ModalTitle("Loading...")),
                dbc.ModalBody("This application is hosted on the AWS Lambda serverless\
                    infrastructure. Please allow a few seconds for it to fully \
                    load its dataset.",
                    style={'text-align':'center'}),
            ],
            id="modal",
            is_open=True,
        ),
    html.H2("KS Electricity Consumption and Solar System Proposal", style={'font-family':'arial','textAlign':'center'}),
    html.Br(),html.Br(),    
    content
],style={ 'padding':'15px','background-color':'#f5f5f5'},fluid=True)


# Callbacks

@callback(
    Output(component_id='compare-summary', component_property='children'),
    Input(component_id='input_size', component_property='value'),
    Input(component_id='sys-checkbox', component_property='value'),
)
def compare_summary_update(size,syss):
    return compare_cards(size,syss)

@callback(
    Output(component_id='summary', component_property='children'),
    Input(component_id='input_size', component_property='value'),
    Input(component_id='chart-checkbox', component_property='value'),
)
def summary_cards_update(size,chart):
    df = data.copy()
    df[f'{chart}_Total(kWh)'] = df[f'{chart}']*size
    
    df['Electricity_Cost($)'] = (round(df['icp667(KWh)']*df['TOU_price(c$/KWh)'] + 
                                       df['icp713(KWh)']*df['TOU_price(c$/KWh)'],3))
    
    df['Net_consum(kWh)'] = (df['icp667(KWh)'] + df['icp713(KWh)'] - df[f'{chart}_Total(kWh)'])

    # Cost with Solar
    df['Cost_wSolar'] = df['Net_consum(kWh)']*df['TOU_price(c$/KWh)']
    df.loc[df['Cost_wSolar']<0,'Cost_wSolar'] = 0


    # Revenue of export
    df['Revenue'] = -(df['Net_consum(kWh)']*df['ISL2201(c$/KWh)'])
    df.loc[df['Revenue']<0,'Revenue'] =  0

    df_daily = df.groupby('Trading_Date',as_index=False).agg(
        {'workingdays':'mean',
         'icp667(KWh)':'sum',
         'icp713(KWh)':'sum',
         'ISL2201(c$/KWh)':'mean',
         'TOU_price(c$/KWh)':'mean',
         f'{chart}_Total(kWh)':'sum',
         'Electricity_Cost($)':'sum',
         'Cost_wSolar':'sum',
         'Revenue':'sum',
        })

    return summary_cards(df_daily)

@callback(
    Output(component_id='main-graph', component_property='figure'),
    Input(component_id='input_size', component_property='value'),
    Input(component_id='chart-checkbox', component_property='value'),
)
def update_maingraph(size,chart):
    df = data.copy()
    df[f'{chart}_Total(kWh)'] = df[f'{chart}']*size
    
    df['Electricity_Cost($)'] = (round(df['icp667(KWh)']*df['TOU_price(c$/KWh)'] + 
                                       df['icp713(KWh)']*df['TOU_price(c$/KWh)'],3))
    
    df['Net_consum(kWh)'] = (df['icp667(KWh)'] + df['icp713(KWh)'] - df[f'{chart}_Total(kWh)'])

    # Cost with Solar
    df['Cost_wSolar'] = df['Net_consum(kWh)']*df['TOU_price(c$/KWh)']
    df.loc[df['Cost_wSolar']<0,'Cost_wSolar'] = 0


    # Revenue of export
    df['Revenue'] = -(df['Net_consum(kWh)']*df['ISL2201(c$/KWh)'])
    df.loc[df['Revenue']<0,'Revenue'] =  0

    df_daily = df.groupby('Trading_Date',as_index=False).agg(
        {'workingdays':'mean',
         'icp667(KWh)':'sum',
         'icp713(KWh)':'sum',
         'ISL2201(c$/KWh)':'mean',
         'TOU_price(c$/KWh)':'mean',
         f'{chart}_Total(kWh)':'sum',
         'Electricity_Cost($)':'sum',
         'Cost_wSolar':'sum',
         'Revenue':'sum',
        })

    fig = main_chart(df_daily,chart)

    return fig     

@callback(
    Output(component_id='detail-graph', component_property='figure'),
    Output(component_id='d-graph-title', component_property='children'),
    Input(component_id='input_size', component_property='value'),
    Input(component_id='chart-checkbox', component_property='value'),
    Input(component_id='main-graph', component_property='clickData')
)
def update_group_charts(size,chart,clk_data):
    df = data.copy()
    df[f'{chart}_Total(kWh)'] = df[f'{chart}']*size
    
    df['Electricity_Cost($)'] = (round(df['icp667(KWh)']*df['TOU_price(c$/KWh)'] + 
                                       df['icp713(KWh)']*df['TOU_price(c$/KWh)'],3))
    
    df['Net_consum(kWh)'] = (df['icp667(KWh)'] + df['icp713(KWh)'] - df[f'{chart}_Total(kWh)'])

    # Cost with Solar
    df['Cost_wSolar'] = df['Net_consum(kWh)']*df['TOU_price(c$/KWh)']
    df.loc[df['Cost_wSolar']<0,'Cost_wSolar'] = 0


    # Revenue of export
    df['Revenue'] = -(df['Net_consum(kWh)']*df['ISL2201(c$/KWh)'])
    df.loc[df['Revenue']<0,'Revenue'] =  0
    

    if clk_data is None:
        clk_date = df['Trading_Date'].min()
        detail_df = df[df['Trading_Date']==clk_date]
        fig2 = group_charts(detail_df,chart,clk_date)
        sel_date = str(clk_date).split(' ',1)[0]

        return fig2, f'Visualisation of the {sel_date}'

    else:
        clk_date = clk_data['points'][0]['x']
        detail_df = df[df['Trading_Date']==clk_date]
        fig2 = group_charts(detail_df,chart,clk_date)
        sel_date = str(clk_date).split(' ',1)[0]

        return fig2, f'Visualisation of the {sel_date}'

@callback(
    Output(component_id='ems-summary', component_property='children'),
    Input(component_id='input_size', component_property='value'),
    Input(component_id='chart-checkbox', component_property='value'),
)
def ems_cards_update(size,chart):
    df = data.copy()
    df[f'{chart}_Total(kWh)'] = df[f'{chart}']*size
    
    df['Carbon_Emission_wo_Solar(t)'] = round(((df['icp667(KWh)'] + df['icp713(KWh)'])*df['Carbon_Intensity(g/KWh)'])/1000000,3)
    
    df['Net_consum(kWh)'] = (df['icp667(KWh)'] + df['icp713(KWh)'] - df[f'{chart}_Total(kWh)'])

    # Cost with Solar
    df['Carbon_Emission_w_Solar(t)'] = (round((df['Net_consum(kWh)']*df['Carbon_Intensity(g/KWh)'])/1000000,3))

    df.loc[df['Carbon_Emission_w_Solar(t)']<0,'Carbon_Emission_w_Solar(t)'] = 0


    daily_df = (df.groupby('Trading_Date',as_index=False)
                .agg({'Carbon_Emission_wo_Solar(t)':'sum','Carbon_Emission_w_Solar(t)':'sum',
                      'Carbon_Intensity(g/KWh)':'mean'})
                .reset_index(drop=True)
                )
    return ems_summary_cards(daily_df)

@callback(
    Output(component_id='ems-graph', component_property='figure'),
    Input(component_id='input_size', component_property='value'),
    Input(component_id='chart-checkbox', component_property='value'),
)
def update_emschart(size,chart):
    df = data.copy()
    df[f'{chart}_Total(kWh)'] = df[f'{chart}']*size
    
    df['Carbon_Emission_wo_Solar(t)'] = round(((df['icp667(KWh)'] + df['icp713(KWh)'])*df['Carbon_Intensity(g/KWh)'])/1000000,3)
    
    df['Net_consum(kWh)'] = (df['icp667(KWh)'] + df['icp713(KWh)'] - df[f'{chart}_Total(kWh)'])

    # Cost with Solar
    df['Carbon_Emission_w_Solar(t)'] = (round((df['Net_consum(kWh)']*df['Carbon_Intensity(g/KWh)'])/1000000,3))

    df.loc[df['Carbon_Emission_w_Solar(t)']<0,'Carbon_Emission_w_Solar(t)'] = 0


    daily_df = (df.groupby('Trading_Date',as_index=False)
                .agg({'Carbon_Emission_wo_Solar(t)':'sum','Carbon_Emission_w_Solar(t)':'sum',
                      'Carbon_Intensity(g/KWh)':'mean'})
                .reset_index(drop=True)
                )

    fig = daily_ems_charts(daily_df)

    return fig        

@callback(
    Output(component_id='ems-detail-graph', component_property='figure'),
    Output(component_id='d-ems-title', component_property='children'),
    Input(component_id='input_size', component_property='value'),
    Input(component_id='chart-checkbox', component_property='value'),
    Input(component_id='ems-graph', component_property='clickData'),
)
def update_emsdetailchart(size,chart,clk_data):
    df = data.copy()
    df[f'{chart}_Total(kWh)'] = df[f'{chart}']*size
    
    df['Carbon_Emission_wo_Solar(kg)'] = (round((df['icp667(KWh)']*df['Carbon_Intensity(g/KWh)'] + 
                                       df['icp713(KWh)']*df['Carbon_Intensity(g/KWh)'])/1000,3))
    
    df['Net_consum(kWh)'] = (df['icp667(KWh)'] + df['icp713(KWh)'] - df[f'{chart}_Total(kWh)'])

    # Cost with Solar
    df['Carbon_Emission_w_Solar(kg)'] = (
        round(df['Net_consum(kWh)']*df['Carbon_Intensity(g/KWh)']/1000,3))
    df.loc[df['Carbon_Emission_w_Solar(kg)']<0,'Carbon_Emission_w_Solar(kg)'] = 0

    # detail_ems = df.copy()

    if clk_data is None:
        clk_date = df['Trading_Date'].min()
        detail_ems = df[df['Trading_Date'] == clk_date]
        fig2 = detail_ems_charts(detail_ems,clk_date)
        sel_date = str(clk_date).split(' ',1)[0]

        return fig2,f'Carbon emission & Carbon intensity of the day {sel_date}'
    
    else:
        clk_date = clk_data['points'][0]['x']
        detail_ems = df[df['Trading_Date'] == clk_date]
        fig2 = detail_ems_charts(detail_ems,clk_date)
        sel_date = str(clk_date).split(' ',1)[0]

        return fig2,f'Carbon emission & Carbon intensity of the day {sel_date}'

app = dashapp.server.wsgi_app

if __name__ == "__main__":
    dashapp.run_server(host='0.0.0.0', port=80, debug=False)